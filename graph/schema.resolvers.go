package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"go_graphql_ent_hello_world/ent"
	"go_graphql_ent_hello_world/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*ent.User, error) {
	// Usamos el cliente Ent para crear un usuario
	user, err := r.Client.User.
		Create().
		SetName(input.Name).
		SetEmail(input.Email).
		Save(ctx) // El método Save ejecuta la inserción

	if err != nil {
		// Aquí podrías manejar errores específicos de Ent, como UniqueConstraintError
		// log.Printf("Error creating user: %v", err)
		return nil, err
	}

	return user, nil
}

// Users is the resolver for the users field.
// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	// Usamos el cliente Ent para consultar todos los usuarios
	users, err := r.Client.User.
		Query(). // Inicia una consulta
		All(ctx) // Obtiene todos los resultados

	if err != nil {
		// log.Printf("Error querying users: %v", err)
		return nil, err
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
